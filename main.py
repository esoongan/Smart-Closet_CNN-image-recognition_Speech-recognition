# list_attr_img 파일에서 삭제한 속성, 2번 속성들을 삭제하는 코드이다.

import numpy as np # array를 사용하기 떄문에 numpy라이브러리를 호출한다.



filepath = 'C:/list_attr_img.txt'  #list attr_img 파일의 경로
filepath_new = 'C:/newfile.txt' #불필요한 속성들을 지우고 새로 쓰여질 파일의 경로

f = open(filepath, 'r')  # 파일을 연다.

#index는 삭제한 속성, 2번 속성의 인덱스값을 담은 리스트이다. 후에, array에서 삭제하고 싶은 인덱스로 삭제하기 위해 미리 list의 형태로 만들어 둔다.
index = [0, 1, 9, 10, 11, 12, 14, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 373, 381, 383, 384, 385, 386, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 442, 443, 446, 447, 448, 449, 452, 453, 456, 457, 458, 459, 461, 462, 465, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 506, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 571, 573, 574, 576, 577, 578, 579, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 617, 618, 619, 621, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 675, 676, 677, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 997, 998, 999,22, 181, 182, 183, 655, 723, 90, 91, 93, 96, 574, 415, 92, 148, 182, 496, 513, 514, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 251, 252, 357, 456, 743, 956, 358, 359, 353, 354, 355, 356, 928, 997, 998, 999, 660, 668 ]



for i in range(289222): #이미지 개수인 289222번 반복
    line = f.readline() #open한 파일을 한줄 씩 읽는다.
    line = line.replace("             ", ",")

    image_name = line[:line.find(',')]
    image_val = line[line.find(',') + 1:]

    image_val_list = image_val.split()


    a = np.array(image_val_list)  # 속성들을(string형태) 배열의 형태로 저장

    new_a = np.delete(a, index)  # 제거해야 할 인덱스를 제거한 새로운 list

    new_f = open(filepath_new, 'a')# add 모드로 파일을 open한다.
    new_f.write(image_name) #newfile에 전에 분리한 이름을 추가한다.
    new_f.write("               ") # 이름과 속성들 사이에 간격을 두기 위해 빈공간을 둔다.

    for i in range(147): # 1000-798-55==147 --> 새로운 파일에는 147개의 -1-1-1 1 1이 있다.//전체 1000개의 속성에서 798개의 버린 속성의 개수, 55개의 2번 단독속성
        new_f.write(new_a[i])#파일에는 배열의 형태로는 작성이 불가하기 때문에 배열의 인자를 하나씩 작성한다.
        new_f.write("   ")# 각 숫자마다 간격을 준다.

    new_f.write("\n") # 각 이미지의 이름이 줄의 맨 앞에 입력되게 하기 위해서 줄을 바꾼다.

